# Python Function App to Linux on Azure
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- dev

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'Koti_Paid (b321893b-78f2-4e98-b106-8c4a140e2f83)'

  # Function app name
  functionAppName: 'kotitestapp'

  # Agent VM image name
  vmImageName: 'windows-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 3.x'
      inputs:
        packageType: 'sdk'
        version: '3.x'
      condition: exists('extensions.csproj')

    - task: DotNetCoreCLI@2
      displayName: 'DotNet Core Restore'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
      condition: exists('extensions.csproj')

    - task: DotNetCoreCLI@2
      displayName: 'DotNet Core Build'
      inputs:
        projects: '**/*.csproj'
        arguments: '--runtime ubuntu.16.04-x64 --output ./bin'
        zipAfterPublish: true
      condition: exists('extensions.csproj')

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.x'
      inputs:
        versionSpec: '3.x' # Choose the appropriate Python version supported by your requirements

    - script: 'python -m pip install -r requirements.txt'
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'functionAppLinux'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'runFromPackage'